{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortType","setSortType","sortReverse","setSortReverse","updateGoods","goods","reversed","newGoods","reverse","sort","good1","good2","Length","length","localeCompare","Alphabet","getNewSort","newSortType","type","buttonClasses","classNames","sortByLength","reverseClasses","resetClasses","hidden","className","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,YAAAA,M,KAML,IAuCaE,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,SAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACMC,EA1CW,SACjBC,EACAL,EACAM,GAEA,IAAMC,EAAQ,YAAOF,GAErB,OAAKL,GAAYM,EACRC,EAASC,WAGdR,GACFO,EAASE,MAAK,SAACC,EAAOC,GACpB,OAAQX,GACN,KAAKL,EAASiB,OACZ,OAAIF,EAAMG,SAAWF,EAAME,OAClBP,EACHK,EAAME,OAASH,EAAMG,OACrBH,EAAMG,OAASF,EAAME,OAGpBP,EACHK,EAAMG,cAAcJ,GACpBA,EAAMI,cAAcH,GAE1B,KAAKhB,EAASoB,SACZ,OAAOT,EACHK,EAAMG,cAAcJ,GACpBA,EAAMI,cAAcH,GAE1B,QACE,OAAO,MAKRJ,GAMaS,CAAWpB,EAAiBI,EAAUE,GAEpDe,EAAc,SAACC,GACnBjB,EAAYiB,IAORC,EAAgBC,IAAW,SAAU,UAAW,CACpD,WAAYpB,IAAaL,EAASoB,WAG9BM,EAAeD,IAAW,SAAU,UAAW,aAAc,CACjE,WAAYpB,IAAaL,EAASiB,SAG9BU,EAAiBF,IAAW,SAAU,UAAW,aAAc,CACnE,YAAalB,IAGTqB,EAAeH,IAAW,SAAU,YAAa,WAAY,CACjEI,OAAQxB,IAAaL,EAASI,UAAYG,IAG5C,OACE,sBAAKuB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEP,KAAK,SACLO,UAAWN,EACXO,QAAS,kBAAMT,EAAYtB,EAASoB,WAHtC,iCAQA,wBACEG,KAAK,SACLO,UAAWJ,EACXK,QAAS,kBAAMT,EAAYtB,EAASiB,SAHtC,4BAQA,wBACEM,KAAK,SACLO,UAAWH,EACXI,QA1Ce,WACrBvB,GAAgBD,IAsCZ,sBAQEF,IAAaL,EAASI,SAAWG,IACjC,wBACEgB,KAAK,SACLO,UAAWF,EACXG,QAAS,WACPzB,EAAYN,EAASI,SACrBI,GAAe,IALnB,sBAaJ,6BACGC,EAAYuB,KAAI,SAACC,GAAD,OACf,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCrIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.871fac02.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Default = '',\n}\n\nconst getNewSort = (\n  goods: string[],\n  sortType: SortType,\n  reversed: boolean,\n): string[] => {\n  const newGoods = [...goods];\n\n  if (!sortType && reversed) {\n    return newGoods.reverse();\n  }\n\n  if (sortType) {\n    newGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Length:\n          if (good1.length !== good2.length) {\n            return reversed\n              ? good2.length - good1.length\n              : good1.length - good2.length;\n          }\n\n          return reversed\n            ? good2.localeCompare(good1)\n            : good1.localeCompare(good2);\n\n        case SortType.Alphabet:\n          return reversed\n            ? good2.localeCompare(good1)\n            : good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return newGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.Default);\n  const [sortReverse, setSortReverse] = useState(false);\n  const updateGoods = getNewSort(goodsFromServer, sortType, sortReverse);\n\n  const newSortType = (type: SortType) => {\n    setSortType(type);\n  };\n\n  const newSortReverse = () => {\n    setSortReverse(!sortReverse);\n  };\n\n  const buttonClasses = classNames('button', 'is-info', {\n    'is-light': sortType !== SortType.Alphabet,\n  });\n\n  const sortByLength = classNames('button', 'is-info', 'is-success', {\n    'is-light': sortType !== SortType.Length,\n  });\n\n  const reverseClasses = classNames('button', 'is-info', 'is-warning', {\n    'is-light': !sortReverse,\n  });\n\n  const resetClasses = classNames('button', 'is-danger', 'is-light', {\n    hidden: sortType === SortType.Default && !sortReverse,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={buttonClasses}\n          onClick={() => newSortType(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortByLength}\n          onClick={() => newSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={reverseClasses}\n          onClick={newSortReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.Default || sortReverse) && (\n          <button\n            type=\"button\"\n            className={resetClasses}\n            onClick={() => {\n              setSortType(SortType.Default);\n              setSortReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {updateGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}